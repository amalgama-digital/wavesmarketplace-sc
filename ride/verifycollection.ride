{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func nameKey(nameUrl: String) = {
  nameUrl + "_name"
}

func descriptionKey(nameUrl: String) = {
  nameUrl + "_description"
}

func ipfsHashKey(nameUrl: String) = {
  nameUrl + "_hash"
}

func addressKey(nameUrl: String) = {
  nameUrl + "_address"
}

func statusKey(nameUrl: String) = {
  nameUrl + "_status"
}

func voteKey(nameUrl: String) = {
  nameUrl + "_vote"
}

func checkVote(numberVote: Int, voices: Int) = {
  if(numberVote / 2 < voices)
  then "VERIFY"
  else "VOITING"
}

@Callable(inv)
func verifyCollection( nameUrl: String, name: String, description: String, hash: String) = {
  if(getStringValue(nameKey(nameUrl)) != "") then {
    throw("This collection was create")
  }
  else { 
    [
      StringEntry(nameKey(nameUrl), name),
      StringEntry(descriptionKey(nameUrl), description),
      StringEntry(addressKey(nameUrl), toBase58String(inv.caller.bytes)),
      StringEntry(ipfsHashKey(nameUrl), hash),
      StringEntry(statusKey(nameUrl), "VOITING"),
      IntegerEntry(voteKey(nameUrl), 0)

    ]
  }
}

@Callable(inv)
func vote(nameUrl: String) = {  
  let listVoiting = split(getStringValue("voting_member"), ",")
  if(!containsElement(listVoiting, toBase58String(inv.caller.bytes))) then {
    throw("You can't vote")
  } else if (statusKey(nameUrl) == "VERIFY") then {
    throw("Voting was ended")
  } else {
    let voices = getIntegerValue(voteKey(nameUrl)) + 1
    [
      IntegerEntry(voteKey(nameUrl), voices),
      StringEntry(statusKey(nameUrl), checkVote(size(listVoiting), voices))
    ]
  }
}

@Callable(inv)
func addVoting(address: String) = {
  let listVoiting = split(getStringValue("voting_member"), ",")
  if(toBase58String(inv.caller.bytes) != toBase58String(this.bytes)) then {
    throw("You don't owner")
  } else if(containsElement(listVoiting, address)) then {
    throw("This address was added")
  } else {
    let list = cons(address, listVoiting)
    [
      StringEntry("voting member", makeString(list, ","))
    ]
  }
}

@Callable(inv)
func removeVoting(address: String) = {
  let listVoiting = split(getStringValue("voting_member"), ",")
  if(toBase58String(inv.caller.bytes) != toBase58String(this.bytes)) then {
    throw("You don't owner")
  } else if(!containsElement(listVoiting, address)) then {
    throw("This address wasn't added")
  } else {
    let index = match indexOf(listVoiting, address) {
      case t:Int => t 
      case _ => 0
    } 
    let list = removeByIndex(listVoiting, index)
    [
      StringEntry("voting member", makeString(list, ","))
    ]
  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)